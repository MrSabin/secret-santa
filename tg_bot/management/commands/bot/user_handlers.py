from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StatesGroup, State
import logging
from aiogram.methods.get_me import GetMe
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from environs import Env

from secret_santa.settings import BASE_DIR
from tg_bot.models import *
# from tg_bot.management.commands.bot.user_keyboards import get_catalog_keyboard
from tg_bot.management.commands.bot.user_menu import *
from aiogram.utils.keyboard import ReplyKeyboardBuilder

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d - %(levelname)-8s - %(asctime)s - %(funcName)s - %(name)s - %(message)s'
)

logger = logging.getLogger(__name__)

env: Env = Env()
env.read_env()

bot: Bot = Bot(token=env('TG_BOT_API'), parse_mode='HTML')

router = Router()


class GameState(StatesGroup):
    user_name = State()


@router.message(Command(commands=["start"]))
async def start_command_handler(message: Message):
    User = await bot(GetMe())
    referrer_candidate = ''
    if " " in message.text:
        referrer_candidate = message.text.split()[1]
        # await bot.send_message(message.from_user.id, f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–∞–Ω—Ç–∞ –ë–æ—Ç üéÅüéÑ‚õÑ\n–í–∞—à –ø—Ä–æ–º–æ-–∫–æ–¥ {referrer_candidate}', reply_markup=main_menu)
    user_id = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(message.from_user.id)).first)()
    if not user_id:
        user_id = UserSantaGame(telegram_id=int(message.from_user.id), first_name=message.from_user.first_name)
        await sync_to_async(user_id.save)()
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç üéÖ{message.from_user.first_name}\n–û—Ä–≥–∞–Ω–∏–∑—É–π —Ç–∞–π–Ω—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏, –∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üéÑ', reply_markup=main_menu)
    else:
        if await sync_to_async(SuperUser.objects.filter(telegram_id=int(message.from_user.id)).first)():
        # —ç—Ç–æ –ü–ú
            await bot.send_message(message.from_user.id,
                                   f'–ü—Ä–∏–≤–µ—Ç üéÖ{message.from_user.first_name}',
                                   reply_markup=main_menu_pm)

        else:
            # —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä, –Ω–æ –∑–∞—à–µ–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
            await bot.send_message(message.from_user.id,
                                   f'–ü—Ä–∏–≤–µ—Ç ‚òÉÔ∏è{message.from_user.first_name}\n–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!!!',
                                   reply_markup=main_menu)


@router.message(F.text == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_main_menu(message: Message):
    await bot.send_message(message.from_user.id, '–∏ —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç –æ—Ç üéÖ', reply_markup=main_menu)


@router.message(F.text == "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–≥—Ä—É")
async def run_game(message: Message):
    await bot.send_message(message.from_user.id, F.text, reply_markup=main_menu)


@router.message(F.text == "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def user_block(message: Message):
    await bot.send_message(message.from_user.id, F.text, reply_markup=main_menu)


@router.message(F.text == "–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É")
async def link_to_game(message: Message):
    bot_name = await bot(GetMe())
    # —Ç—É—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ - –ü–†–û–ú–û
    promo = 'Test'
    await bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ\n–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ üéÖ\n\nhttps://t.me/@{bot_name.username}?start={promo}', reply_markup=main_menu)



@router.message(F.text == "–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def show_main_menu(message: Message):
    async for user in UserSantaGame.objects.all().order_by('telegram_id'):
        try:
            await bot.send_message(str(user.telegram_id), f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥...')
        except TelegramBadRequest:
            await bot.send_message(message.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º–º {str(user.telegram_id)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@router.message(F.text == "–û–± –∏–≥—Ä–µ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞...")
async def create_order(message: Message):
    await message.answer('https://dvmn.org/')



