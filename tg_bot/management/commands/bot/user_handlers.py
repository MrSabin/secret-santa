from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StatesGroup, State
import logging
from aiogram.methods.get_me import GetMe
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from environs import Env
from tg_bot.models import *
from tg_bot.management.commands.bot.user_menu import *

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d - %(levelname)-8s - %(asctime)s - %(funcName)s - %(name)s - %(message)s'
)

logger = logging.getLogger(__name__)

env: Env = Env()
env.read_env()

bot: Bot = Bot(token=env('TG_BOT_API'), parse_mode='HTML')

router = Router()


class GameStateEmail(StatesGroup):
    email_game = State()


class GameStateName(StatesGroup):
    name_game = State()


class GameMyWish(StatesGroup):
    my_wish = State()


@router.message(Command(commands=["start"]))
async def start_command_handler(message: Message):
    # User = await bot(GetMe())
    promo_candidate = ''
    find_game = None
    user_id = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(message.from_user.id)).first)()
    if " " in message.text:
        promo_candidate = message.text.split()[1]
        find_game = await sync_to_async(Game.objects.filter(promo_key=str(promo_candidate).upper()).first)()

    if not user_id:
        # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ - –Ω–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∏–≥—Ä—É
        user_id = UserSantaGame(telegram_id=int(message.from_user.id), first_name=message.from_user.first_name, my_game=find_game)
        await sync_to_async(user_id.save)()
        if not find_game:
            await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —Å–æ–∑–¥–∞–π –∏–≥—Ä—ÉüéÖ\n–û—Ä–≥–∞–Ω–∏–∑—É–π —Ç–∞–π–Ω—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏, –∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üéÑ', reply_markup=main_menu)
        else:
            await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —Ç—ã –≤ –∏–≥—Ä–µ\n\'{str(find_game.info)}\'\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è {str(find_game.end_game)}', reply_markup=main_menu)
    else:
        if await sync_to_async(Assistant.objects.filter(telegram_id=int(message.from_user.id)).first)():
        # —ç—Ç–æ –ê—Å–∏—Å—Ç–µ–Ω—Ç –∏–≥—Ä
            await bot.send_message(message.from_user.id,
                                   f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —Ç—ã —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–≥—Ä—ã –°–∞–Ω—Ç–∞ üéÖ\n–ú–æ–∂–µ—à—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É',
                                   reply_markup=main_menu_pm)
        else:
            # —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä –∏ –±—ã–ª —Ä–∞–Ω–µ–µ –≤ –±–æ—Ç–µ, –Ω–æ –∑–∞—à–µ–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ,
            # –µ—Å–ª–∏ –ø–æ –ø—Ä–æ–º–æ, —Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –ø—Ä–æ–º–æ
            if find_game:
                await sync_to_async(UserSantaGame.objects.filter(id=user_id.id).update)(my_game=find_game)
                await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç ‚òÉÔ∏è{message.from_user.first_name}\n–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ –¢–∞–π–Ω—ã–π-–°–∞–Ω—Ç–∞!!!\n\'{str(find_game.info)}\'\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è {str(find_game.end_game)}', reply_markup=main_menu)
            else:
                await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, p–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è\n–ú–æ–∂–µ—à—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö', reply_markup=main_menu)


@router.message(F.text == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_main_menu(message: Message):
    await bot.send_message(message.from_user.id, '–∏ —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç –æ—Ç üéÖ', reply_markup=main_menu)


@router.message(F.text == "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–≥—Ä—É")
async def run_game(message: Message):
    await bot.send_message(message.from_user.id, F.text, reply_markup=main_menu)


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É")
async def run_game(message: Message):
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏–≥—Ä—ã',
                               reply_markup=await get_budget())

@router.callback_query(F.data.startswith('bonus_'))
# @router.callback_query(F.data.startswith('bonus_'))
async def get_bonus_handler(callback: CallbackQuery):
    bonus_id = callback.data.split('_')[-1]
    user_id = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(callback.from_user.id)).first)()
    if user_id.is_game_start:
        await bot.send_message(callback.from_user.id,
                               f"–£ –≤–∞—Å –∏–≥—Ä–∞ –¢–∞–π–Ω—ã–π-–°–∞–Ω—Ç–∞ - —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=main_menu)
    else:
        bot_name = await bot(GetMe())
        budget = await sync_to_async(Bonus.objects.filter(id=bonus_id).first)()
        new_game = Game(bonus=budget, info='–ò–≥—Ä–∞ –¢–∞–π–Ω—ã–π-–°–∞–Ω—Ç–∞ üéÖ', end_game=datetime(year=datetime.now().year, month=12, day=30))
        await sync_to_async(new_game.save)()
        game_promo_key = new_game.promo_key
        await sync_to_async(UserSantaGame.objects.filter(id=user_id.id).update)(my_game=new_game, is_game_start=True)
        await bot.send_message(callback.from_user.id, f"–í–∞—à–∞ –∏–≥—Ä–∞ –¢–∞–π–Ω—ã–π-–°–∞–Ω—Ç–∞-—Å–æ–∑–¥–∞–Ω–∞, —Å—Å—ã–ª–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è\nhttps://t.me/{bot_name.username}?start={game_promo_key}", reply_markup=main_menu)


@router.message(F.text == "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def user_block(message: Message):
    await bot.send_message(message.from_user.id, F.text, reply_markup=main_menu)

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def user_block(message: Message):
    await bot.send_message(message.from_user.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=menu_profile)

@router.message(Command("–û—Ç–º–µ–Ω–∞"))
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π", reply_markup=menu_profile,)

@router.message(F.text == "–ú–æ—ë –∂–µ–ª–∞–Ω–∏–µ")
async def user_block(message: Message, state: FSMContext):
    await state.set_state(GameMyWish.my_wish)
    await message.answer("–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µüòâ!\n–ò –∫—Ç–æ –∑–Ω–∞–µ—Ç! –ú–æ–∂–µ—Ç –æ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è", reply_markup=cancel_menu)

@router.message(GameMyWish.my_wish)
async def process_my_wish(message: Message, state: FSMContext) -> None:
        data = await state.update_data(my_wish=message.text)
        await state.clear()
        my_wish = data.get("my_wish", "<something unexpected>")
        current_user = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(message.from_user.id)).first)()
        await sync_to_async(UserSantaGame.objects.filter(id=current_user.id).update)(my_wish=my_wish)
        await bot.send_message(message.from_user.id, f'–°–∞–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç üéÖ ', reply_markup=main_menu)


@router.message(F.text == "–ò–º—è –∏–≥—Ä—ã")
async def user_block(message: Message, state: FSMContext):
    await state.set_state(GameStateName.name_game)
    await message.answer("–ó–∞–¥–∞–π—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã !", reply_markup=cancel_menu)

@router.message(GameStateName.name_game)
async def process_email(message: Message, state: FSMContext) -> None:
        data = await state.update_data(name_game=message.text)
        await state.clear()
        name_game = data.get("name_game", "<something unexpected>")
        current_user = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(message.from_user.id)).first)()
        if current_user.is_game_start:
            await sync_to_async(Game.objects.filter(id=current_user.my_game_id).update)(info=name_game)
            await bot.send_message(message.from_user.id, f'–£—Å–ø–µ—à–Ω–æ ü§ù ', reply_markup=main_menu)
        else:
            await bot.send_message(message.from_user.id, f'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é! –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–†–û–ú–û –∫–æ–¥', reply_markup=main_menu)


@router.message(F.text == "–£–∫–∞–∑–∞—Ç—å –ø–æ—á—Ç—É")
async def user_block(message: Message, state: FSMContext):
    await state.set_state(GameStateEmail.email_game)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É!", reply_markup=cancel_menu)


@router.message(GameStateEmail.email_game)
async def process_email(message: Message, state: FSMContext) -> None:
        data = await state.update_data(email_game=message.text)
        await state.clear()
        email = data.get("email_game", "<something unexpected>")
        current_user = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(message.from_user.id)).first)()
        await sync_to_async(UserSantaGame.objects.filter(id=current_user.id).update)(email=email)
        await bot.send_message(message.from_user.id, f'–£—Å–ø–µ—à–Ω–æ ü§ù ', reply_markup=main_menu)


@router.message(F.text == "–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É")
async def link_to_game(message: Message):
    bot_name = await bot(GetMe())
    user_id = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(message.from_user.id)).first)()
    promo = await sync_to_async(Game.objects.filter(id=user_id.my_game_id).first)()
    if promo:
        await bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ\n–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ üéÖ\n\nhttps://t.me/{bot_name.username}?start={str(promo.promo_key)}', reply_markup=main_menu)
    else:
        await bot.send_message(message.from_user.id, f'–ê–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ÄºÔ∏è\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é...', reply_markup=main_menu)


@router.message(F.text == "–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def show_main_menu(message: Message):
    async for user in UserSantaGame.objects.all().order_by('telegram_id'):
        try:
            await bot.send_message(str(user.telegram_id), f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥...')
        except TelegramBadRequest:
            await bot.send_message(message.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º–º {str(user.telegram_id)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∂–µ–ª–∞–Ω–∏–π")
async def view_wish(message: Message):
    current_user = await sync_to_async(UserSantaGame.objects.filter(telegram_id=int(message.from_user.id)).first)()
    if current_user.is_game_start:
        game = await sync_to_async(Game.objects.filter(id=current_user.my_game_id).first)()
        wishes = []
        wishes.append(f'–°–ø–∏—Å–∫–∏ –∂–µ–ª–∞–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞\n')
        async for wish in UserSantaGame.objects.all():
            if wish.my_wish:
                wishes.append(f'{wish.my_wish}')
        wish_list = '\n'.join(wishes)
        await message.answer(wish_list)
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...')


@router.message(F.text == "–û–± –∏–≥—Ä–µ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞...")
async def create_order(message: Message):
    await message.answer('https://dvmn.org/')
